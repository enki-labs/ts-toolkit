<% include header %>
<% include mainnav %>

<div id="task-edit" class="modal container hide fade" tabindex="-1">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Edit</h3>
    </div>
    <div class="modal-body">
        <table><tr><td>
            <form id="task-edit-form">
                    <div class="input-prepend">
	                    <span class="add-on">Name</span>
	                    <input type="text" value="" name="name" class="span4">
                    </div>
                    <div class="input-prepend">
	                    <span class="add-on">Search Tags</span>
	                    <input type="text" value="" name="searchTags" class="span4">
                    </div>
                    <div class="input-prepend">
	                    <span class="add-on">Add Tags</span>
	                    <input type="text" value="" name="addTags" class="span4">
                    </div>
                    <div class="input-prepend">
	                    <span class="add-on">Remove Tags</span>
	                    <input type="text" value="" name="removeTags" class="span4">
                    </div>
            </td>
            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
            <td>
                    <div class="input-prepend">
	                    <span class="add-on">Detail</span>
	                    <textarea rows="12" class="field span7" name="detail"></textarea>
                    </div>
                    <input type="hidden" value="" name="_id">                
            </form>
            <button class="btn btn-primary" id="task-edit-save">Save</button>
            <button class="btn btn-warning" id="task-edit-clone">Clone</button>
            <button class="btn btn-primary" id="task-edit-reset">Cancel</button>
            <button class="btn btn-warning" id="task-edit-delete">Delete</button>
            </td></tr>
        </table>
    </div>
</div>


<!--
<div class="container">
    <div class="row-fluid">
        <div class="span12">
            <div class="grid-header" style="width:100%">
                <a id="task-add" class="btn btn-primary btn-mini pull-right"><i class="icon-plus icon-white"></i> Add</a>
                <div class="input-append">
                    <input type="text" value="" id="search" class="span2">
                    <button class="btn" type="button" id="search-run">Search</button>
                </div>
                <h3>Explorer</h3>
            </div>
            <div id="task" style="width:100%; height:600px;"></div>
        </div>
    </div>
    </div>
    -->
    
    
<div class="container-fluid" style="height: 100%;">
    <div class="row-fluid">    
        <div class="span3" style="white-space: nowrap; overflow-y: auto;">
            <div class="input-append">
                    <input type="text" value="" id="search" class="span2">
                    <button class="btn" type="button" id="search-run">Search</button>
                </div>
            <div id="task" style="width:100%; height: 700px;">
            </div>
        </div>

        <div class="span9">   
            <div id="plot-buttons" class="input-append">
                <button class="btn" type="button" id="plot-left-zero"><i class="icon-fast-backward"></i></button>
                <button class="btn" type="button" id="plot-left"><i class="icon-backward"></i></button>
                <input class="span1" id="plot-count" type="text" value="25000">
                <button class="btn" type="button" id="plot-right"><i class="icon-forward"></i></button>
                <button class="btn" type="button" id="plot-right-zero"><i class="icon-fast-forward"></i></button>
                <button class="btn" type="button" id="plot-unzoom"><i class="icon-zoom-out"></i></button>
            </div>
            <div id="plot" style="height: 700px;"></div>
        </div>

    </div>
</div>
    
    
    


<% include scripts %>
<script src="http://code.highcharts.com/stock/highstock.js" type="text/javascript"></script>
<script src="http://code.highcharts.com/stock/highcharts-more.js" type="text/javascript"></script>
<script src="http://code.highcharts.com/stock/modules/exporting.js" type="text/javascript"></script>


<script>

    var grid;

    var columns = [
        {id: "tag", name: "Tag", field: "tag", width: 300, sortable: false},
        {id: "key", name: "Key", field: "key", width: 250, sortable: false}
        //{id: "actions", name: "Actions", field: "actions", width: 200, formatter: actionFormatter}
    ];
    
    function actionFormatter (row, cell, value, columnDef, dataContext)
    {
        var buttons = "<a class='btn btn-primary btn-mini' id='" + dataContext.id + "'><i class='icon-plus icon-white'></i> Clone</a>";
        
        return buttons;
    }

    var tableOptions = {
        rowHeight: 24,
        editable: true,
        enableAddRow: false,
        enableCellNavigation: true,
        enableColumnReorder: true
    };

    $.task_edit_load = function (data)
    {
        $(':input[name="name"]').val(data.name);
        $(':input[name="searchTags"]').val(data.searchTags.join(","));
        $(':input[name="addTags"]').val(data.addTags.join(","));
        $(':input[name="removeTags"]').val(data.removeTags.join(","));
        var regexBackslash = new RegExp("\\\\\\\\", "g");
        $(':input[name="detail"]').val(JSON.stringify(data.detail).replace(regexBackslash, "\\"));
        $(':input[name="_id"]').val(data._id);
        $('#task-edit').modal();
    };

    $.task_edit_reset = function ()
    {
        $.task_edit_load({name:'', searchTags:[], addTags:[], removeTags:[], detail:'', _id:''});
        $('#task-edit').modal('hide');
    };

    $.task_edit_tojson = function ()
    {
        data = {};
        data.name = $(':input[name="name"]').val();
        data.searchTags = $(':input[name="searchTags"]').val().length > 0 ? $(':input[name="searchTags"]').val().split(',') : [];
        data.addTags = $(':input[name="addTags"]').val().length > 0 ? $(':input[name="addTags"]').val().split(',') : [];
        data.removeTags = $(':input[name="removeTags"]').val().length > 0 ? $(':input[name="removeTags"]').val().split(',') : [];
        var regexBackslash = new RegExp("\\\\", "g");
        data.detail = $(':input[name="detail"]').val().length > 0 ? JSON.parse($(':input[name="detail"]').val().replace(regexBackslash, "\\\\")) : {};
        data._id = $(':input[name="_id"]').val();
        return data;
    };

    function save (data, callback)
    {
	    $.post("/task/save", {content: JSON.stringify(data)}).done( function(response) {
            find({}, {}, callback);
	    });
    };

    function find (searchTags, callback)
    {
        $.post("/task/detail", {content: JSON.stringify(searchTags)}).done( function(data) {
            grid = new Slick.Grid("#task", JSON.parse(data), columns, tableOptions);
	        grid.setSelectionModel(new Slick.RowSelectionModel());
	        grid.onSelectedRowsChanged.subscribe(function(e, args) { $.load_file(grid.getData()[args.rows[0]]); });
            callback();
	    });
    };

    $(function() {

        $("#search-run").click(function() {
            $('#task-edit').modal('hide');
            find($("#search").val().split(","), function () {});
        });

        $("#search").keyup(function(event){
            if(event.keyCode == 13) {
                $("#search-run").click();
            }
        });
        
        $("#task-edit-clone").click(function() {
            var jsonData = $.task_edit_tojson();
            jsonData._id = "";
            save(jsonData, function () {
                $.task_edit_reset();
            });
        });

        $("#task-edit-reset").click(function() {
            $.task_edit_reset();
        });

        $("#task-edit-save").click(function() {
            save($.task_edit_tojson(), function () {
                $.task_edit_reset();
            });
        });
    });
    
</script>



<script>

$.load_file = function (detail)
{
    var file = detail.key;
    Highcharts.setOptions({ global : { useUTC : true } });

    if (window.chart)
    {
        window.chart.showLoading('Loading data from server...');
        $("#plot-left").unbind("click");
        $("#plot-right").unbind("click");
        $("#plot-left-zero").unbind("click");
        $("#plot-right-zero").unbind("click");
        $("#plot-unzoom").unbind("click");
        delete window.chart;
    }

    function saveZoom (e)
    {
        if (e.trigger == 'zoom' && !window.chartExtremes)
        {                       
            window.chartExtremes = this.getExtremes();
        }
    }
	
    function createUpdateFunction (baseUrl, direction)
    {
        return function (e, override) 
        {
            if (window.chartExtremes)
            {
                window.chart.xAxis[0].setExtremes(window.chartExtremes.dataMin, window.chartExtremes.dataMax);
                window.chartExtremes = null;
            }

            var plotCount = parseInt($('#plot-count').val());

            if (e.trigger == 'rangeSelectorButton')
            {
                if (direction > 0)
                {
                    if (override)
                    {
                        window.chartRange.to = override;
                        window.chartRange.from = override - plotCount;
                    }
                    else
                    {
                        window.chartRange.to = Math.min(window.chartRange.max, (window.chartRange.to + plotCount));
                        window.chartRange.from = window.chartRange.to - plotCount;
                    }
                }
                else
                {
                    if (override)
                    {
                        window.chartRange.from = override;
                        window.chartRange.to = Math.max((override + plotCount), window.chartRange.max);
                    }
                    else
                    {
                        window.chartRange.from -= plotCount;
                        window.chartRange.from = Math.max(0, window.chartRange.from);
                        window.chartRange.to = window.chartRange.from + plotCount;
                    }
                }

	            window.chart.showLoading('Loading data from server...');
	            $.getJSON(baseUrl+ '&start=' + window.chartRange.from + '&end='+ window.chartRange.to,
                            function(data) {
		                        window.chart.series[0].setData(data.detail);
                                var ex = window.chart.xAxis[0].getExtremes();
                                window.chart.xAxis[0].setExtremes(ex.dataMin, ex.dataMax);
		                        window.chart.hideLoading();
	                        }
                );
            }
        };
    }

    var url = "/getdata?file=" + encodeURIComponent(file);
    if (window.chart)
    {
        window.chart.showLoading('Loading data from server...');
    }

	$.getJSON(url + "&start=0&end=25000", function(data) {
                    
        var plotType = 'ohlc'; 
        if ($.inArray("filtered", detail.tag) > -1) { plotType = 'line'; }
        window.chartRange = {from: data.from, to: data.to, max: data.max};
	    window.chart = new Highcharts.StockChart({
					        chart : { renderTo : 'plot', type: 'line', zoomType: 'x' },
                            navigator : {
				                adaptToUpdatedData: false,
				                series : {
					                data : data.summary,
                                    dataGrouping: { enabled: false }
				                }
			                },
					        rangeSelector : { enabled: false },
					        title : { text : null },
                            tooltip: { pointFormat: '<b>{point.y}</b><br/>' },
                            xAxis : {
				                events : {
					                setExtremes : saveZoom
				                },
				                minRange: 1 // one microsecond
			                },
                            scrollbar : { enabled: false },
				            series : [{
						                type : plotType,
						                name : '',
						                data : data.detail,
						                dataGrouping : { enabled: false }
					        }]
        });
        window.chart.hideLoading();
        var left = createUpdateFunction(url, -1);
        var right = createUpdateFunction(url, 1);
        $("#plot-left").click(function() {
            left({trigger: 'rangeSelectorButton'});
        });
        $("#plot-right").click(function() {
            right({trigger: 'rangeSelectorButton'});
        });
        $("#plot-left-zero").click(function() {
            left({trigger: 'rangeSelectorButton'}, 0);
        });
        $("#plot-right-zero").click(function() {
            right({trigger: 'rangeSelectorButton'}, window.chartRange.max);
        });
        $("#plot-unzoom").click(function() {
            if (window.chartExtremes) { window.chart.xAxis[0].setExtremes(window.chartExtremes.dataMin, window.chartExtremes.dataMax); window.chartExtremes = null; }
        });
    });
}

</script>


<% include footer %>

